% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/permutation_join.R
\name{permutation_join}
\alias{permutation_join}
\title{Permutation Join of Two URL Sets (Base R Version)}
\usage{
permutation_join(
  data_A,
  data_B,
  col_A = "URL",
  col_B = "URL",
  suffix_A = "_A",
  suffix_B = "_B"
)
}
\arguments{
\item{data_A}{A data frame containing URLs for the left side of the join.}

\item{data_B}{A data frame containing URLs for the right side of the join.}

\item{col_A}{Character string, the name of the column in `data_A` that
contains URLs. Defaults to "URL".}

\item{col_B}{Character string, the name of the column in `data_B` that
contains URLs. Defaults to "URL".}

\item{suffix_A}{Character string, suffix to add to `data_A` column names
in the output if they conflict with `data_B` column names (excluding
join keys and specially created columns like OriginalURL_A). Defaults to "_A".}

\item{suffix_B}{Character string, suffix to add to `data_B` column names
in the output if they conflict with `data_A` column names. Defaults to "_B".}
}
\value{
A data frame representing the join. Each row signifies a unique pair of
  rows (one from `data_A`, one from `data_B`) linked by a common URL
  permutation. The output includes:
  \itemize{
    \item `OriginalURL_A`: The URL from the linking row in `data_A`.
    \item `OriginalURL_B`: The URL from the linking row in `data_B`.
    \item `JoinKey`: The specific permutation derived from `data_A`'s URL
          that matched a permutation from `data_B`'s URL.
    \item All other original columns from `data_A` and `data_B`, with
          suffixes applied by `base::merge` to resolve name conflicts
          if necessary.
  }
  Returns an empty data frame with the expected structure if no matches are found
  or if inputs are invalid/empty.
}
\description{
Performs a join between two data frames based on URL permutations.
It identifies rows in `data_A` and `data_B` that can be linked because
a URL in one is a permutation of a URL in the other (considering variations
in scheme, www prefix, and trailing slashes).
This version aims to use primarily base R functions.
}
\examples{
# Create dummy data for permute_url if not loaded (for example context)
if (!exists("permute_url", mode = "function")) {
  permute_url <- function(urls) {
    if (!is.character(urls)) urls <- as.character(urls)
    if (length(urls) == 0) return(data.frame(URL=character(), Permutation=character(),
                                             stringsAsFactors = FALSE))
    all_perms_list <- lapply(urls, function(u) {
      if (is.na(u) || u == "") {
        return(data.frame(URL=u, Permutation=NA_character_,
                          stringsAsFactors = FALSE))
      }
      # Simplified mock for example purposes
      stripped_u <- gsub("^(https?://)?(www\\\\.)?", "", u)
      perms <- unique(c(stripped_u, paste0(stripped_u, "/")))
      return(data.frame(URL = rep(u, length(perms)), Permutation = perms,
                        stringsAsFactors = FALSE))
    })
    return(do.call(rbind, all_perms_list))
  }
}

dfA <- data.frame(
  ID_A = 1:2,
  URL_A_col = c("http://example.com/path", "www.test.com/another/"),
  DataA = LETTERS[1:2],
  SharedCol = c("val1", "val2"),
  stringsAsFactors = FALSE
)
dfB <- data.frame(
  ID_B = 1:3,
  URL_B_col = c("example.com/path/", "test.com/another", "unrelated.org"),
  DataB = letters[24:26], # x, y, z
  SharedCol = c("val_x", "val_y", "val_z"),
  stringsAsFactors = FALSE
)

# To run example (make sure permute_url is defined as above or from package)
# joined_result <- permutation_join(dfA, dfB, col_A = "URL_A_col", col_B = "URL_B_col",
#                                 suffix_A = ".dfA", suffix_B = ".dfB")
# print(joined_result)

# Example with default "URL" column name
dfA_std <- data.frame(URL = "site.com/page", ValA = 10, stringsAsFactors = FALSE)
dfB_std <- data.frame(URL = "https://www.site.com/page/", ValB = 20, stringsAsFactors = FALSE)
# joined_std <- permutation_join(dfA_std, dfB_std)
# print(joined_std)
}
