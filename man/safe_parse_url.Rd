% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rurl.R
\name{safe_parse_url}
\alias{safe_parse_url}
\title{Parse a URL comprehensively, extracting and deriving all relevant components.}
\usage{
safe_parse_url(
  url,
  protocol_handling = c("keep", "none", "strip", "http", "https"),
  www_handling = c("none", "strip", "keep", "if_no_subdomain"),
  tld_source = c("all", "private", "icann"),
  case_handling = c("lower", "keep", "upper"),
  trailing_slash_handling = c("none", "keep", "strip"),
  subdomain_levels_to_keep = NULL
)
}
\arguments{
\item{url}{A character vector containing one or more URLs to be parsed.}

\item{protocol_handling}{A character string specifying how to handle
protocols. Defaults to "keep".
\itemize{
  \item{"keep": If a scheme exists (http, https, ftp, ftps), it's used. If no scheme, "http://" is added.}
  \item{"none": If a scheme exists, it's used. If no scheme, then no scheme is used (scheme component will be NA).}
  \item{"strip": Any existing scheme is removed (scheme component will be NA).}
  \item{"http": The scheme is forced to be "http".}
  \item{"https": The scheme is forced to be "https".}
}}

\item{www_handling}{A character string specifying how to handle "www"
and "www[number]" prefixes in the host. Defaults to "none".
\itemize{
  \item{"none": (Default) Leaves the host's www prefix (or lack thereof) untouched.}
  \item{"strip": Removes any "www." or "www[number]." prefix.}
  \item{"keep": Ensures the host starts with "www.". If it has "www[number].", it's normalized to "www.". If no www prefix, "www." is added. An empty input host remains empty.}
  \item{"if_no_subdomain": If the host is a bare registered domain (e.g., "example.com"), "www." is added. If the host already has a "www." or "www[number]." prefix, it is normalized to "www." (e.g., "www1.example.com" becomes "www.example.com"; "www1.sub.example.com" becomes "www.sub.example.com"). If a non-www subdomain exists (e.g., "sub.example.com" or the normalized "www.sub.example.com"), the host is not further altered. An empty input host remains empty.}
}}

\item{tld_source}{Which TLD source to use for TLD extraction: "all", "icann",
or "private". Defaults to "all".}

\item{case_handling}{A character string specifying how to handle the case of
                   the cleaned URL. Defaults to "lower".
\itemize{
  \item{"keep": Preserves the original casing.}
  \item{"lower": (Default) Converts the cleaned URL to lowercase.}
  \item{"upper": Converts the cleaned URL to uppercase.}
}}

\item{trailing_slash_handling}{A character string specifying how to handle
trailing slashes in the path component of the cleaned URL. Defaults to "none".
\itemize{
  \item{"none": (Default) No specific handling is applied. Path remains as is after initial parsing.}
  \item{"keep": Ensures a trailing slash. If a path exists and doesn't end with one, it's added. If path is just "/", it's kept.}
  \item{"strip": Removes a trailing slash if present, unless the path is solely "/".}
}}

\item{subdomain_levels_to_keep}{An integer or NULL. Determines how many levels of subdomains are kept,
in addition to any 'www.' prefix handled by `www_handling`.
\itemize{
  \item{`NULL`: (Default) No specific subdomain stripping is performed beyond `www_handling`.}
  \item{`0`: All subdomains are stripped. If `www_handling` preserved or added 'www.',
       it remains (e.g., 'www.sub.example.com' becomes 'www.example.com'; 'sub.example.com' becomes 'example.com').}
  \item{`N > 0`: Keeps up to N levels of subdomains, counted from right-to-left (closest to the registered domain),
       in addition to any 'www.' prefix. E.g., if N=1, 'three.two.one.example.com' becomes 'one.example.com';
       'www.three.two.one.example.com' (post www_handling) becomes 'www.one.example.com'.}
}}
}
\value{
A named list with the following components:
  \itemize{
    \item `original_url`: The original URL string provided.
    \item `scheme`: The scheme (e.g., "http", "https").
    \item `host`: The host (e.g., "www.example.com"). NA if the host becomes empty after processing.
    \item `port`: The port number.
    \item `path`: The path component (e.g., "/path/to/resource").
    \item `query`: The query string (e.g., "name=value").
    \item `fragment`: The fragment identifier (e.g., "section").
    \item `user`: The user name for authentication.
    \item `password`: The password for authentication.
    \item `domain`: The registered domain name (e.g., "example.com"). NA if host is an IP, empty, or derivation fails.
    \item `tld`: The top-level domain (e.g., "com"). NA if host is an IP, empty, or derivation fails.
    \item `is_ip_host`: Logical, TRUE if the host is an IP address.
    \item `clean_url`: The URL reconstructed from scheme, host, and path after processing, with case handling applied. NA if host is empty/NA.
    \item `parse_status`: Character string indicating parsing outcome ("ok", "ok-ftp", "error", "warning-no-tld").
  }
  Returns `NULL` if the URL is fundamentally unparseable (e.g., NA, empty) or uses a disallowed scheme.
}
\description{
This function serves as the core URL processing engine. It parses a URL,
handles protocol and www prefix modifications, detects IP addresses,
and derives components like the registered domain and top-level domain (TLD).
}
\examples{
safe_parse_url("http://www.Example.com/Path?q=1#Frag", protocol_handling = "keep", case_handling = "lower")
safe_parse_url("Example.com/Another", protocol_handling = "none", www_handling = "keep", case_handling = "upper", trailing_slash_handling = "keep")
safe_parse_url("example.com", www_handling = "if_no_subdomain") # -> www.example.com
safe_parse_url("sub.example.com", www_handling = "if_no_subdomain") # -> sub.example.com
safe_parse_url("www1.example.com", www_handling = "if_no_subdomain") # -> www.example.com
safe_parse_url("www1.sub.example.com", www_handling = "if_no_subdomain") # -> www.sub.example.com
safe_parse_url("http://www.example.com/path/", trailing_slash_handling = "strip")
safe_parse_url("192.168.1.1/test")
safe_parse_url("ftp://user:pass@ftp.example.co.uk:21/file.txt")
}
\keyword{internal}
